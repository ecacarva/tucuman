boxplot(c(treinado,controle)~rep(c('treinado','controle'),c(length(treinado),length(controle))))
# Teste não paramétrico de Wilcoxon
wilcox.test(treinado,controle,paired=F,alternative='greater',conf.level = 0.95)
# H0: treinado=controle
# H1: treinado>controle
# Como o valo p > 0,05, não rejeito H0, ou seja, ao nível de 5% de significância,
# há evidências de que não há diferenças entre ratos treinados e ratos controle
#**************Kolmogorov-Smirnov**********************************
#exercicio 1
#*************************************************************
A<-c(0.92, 1.00, 0.55, 0.61, 2.27,
0.81, 0.47, 1.69, 0.40, 0.80,
0.88, 0.29, 0.87, 1.27, 0.76,
1.04, 1.53, 0.33, 0.05, 1.81,
0.39, 0.60, 0.52, 0.32, 2.02)
B<- c(1.78,1.25,1.01,1.82,1.95,
1.81,0.68,1.48,1.59,0.89,
0.86,1.63,1.26,1.07,1.31)
shapiro.test(A)    #não há normalidade
qqnorm(A)
qqline(A)
shapiro.test(B)
qqnorm(B)
qqline(B)
boxplot(c(A,B)~ rep(c('Droga A','Droga B'), c(length(A),length(B)))  )
ks.test(A,B)
#há diferença entre as drogas
# resolvendo por Mann-Whitney
wilcox.test(A,B,paired=F,alternative='two.sided')
#*************************************************************
#exercício 2
#*************************************************************
varA<-c(4.3,3.8,5.2,2.5,3.5,4.1,5.1,4.0,2.2,3.8,4.5,1.7,
3.6,4.5,5.0)
varB<-c(4.2,4.8,4.7,6.5,6.3,5.9,7.2,5.1,6.2,6.8)
#**************Kruskal-Wallis**********************************
#exercicio 1
#*************************************************************
A<- c(116.1,114.4,113.6,101.6,112.7)
B<- c(105.3, 99.9,104.8,105.1,100.2)
C<- c(121.6,122.0,124.9,123.3)
D<- c(123.8,122.9,118.5)
shapiro.test(A)
shapiro.test(B)
shapiro.test(C)
shapiro.test(D)
var=c(A,B,C,D)
tratamento=factor(rep(1:4,c(length(A),length(B),length(C),
length(D))), labels=c('A','B','C','D'))
tratamento
boxplot(var~tratamento,xlab='Tratamento',ylab='Rendim(Kg)')
kruskal.test(list(A,B,C,D))  #ou como abaixo
kruskal.test(var,tratamento)
# Se vc tem um controle usar o teste abaixo para comparações multiplas
library(pgirmess)
kruskalmc(var,tratamento,probs=0.05,cont=NULL)
#como valor p<0,05, rejeitamos H0. Ou seja, há diferença signif
# teste de comparações multiplas pois houve diferença entre tratamentos
library(nparcomp)
dat<- data.frame(var=var,tratamento=tratamento)
attach(dat)
a<-nparcomp(var~tratamento,  data=dat,
type = "Tukey",alternative = "two.sided")
summary(a)
plot(a)
#*************************************************************
#exercício 2
#*************************************************************
A<- c(73,64,67,62,70)
B<- c(84,80,81,77)
C<- c(82,79,71,75)
tempo=c(A,B,C)
marca=factor(rep(1:3,c(length(A),length(B),length(C)
)), labels=c('A','B','C'))
boxplot(tempo~marca,xlab='Marca',ylab='tempo')
kruskal.test(list(A,B,C))
#como valor p<0,05, rejeitamos H0. Ou seja, há diferença signif
# teste de comparações multiplas
library(nparcomp)
dat<- data.frame(tempo=tempo,marca=marca)
attach(dat)
a<-nparcomp(tempo~marca,  data=dat,
type = "Tukey",alternative = "two.sided")
summary(a)
plot(a)
plot(a,xlab='Marca')
#*************************************************************
summary(a)
plot(a,xlab='Marca')
#*********************************************************
# Exercícios gerais
#*********************************************************
#*******postos assinaldados de Wilcoxon ******************
# Exercício 1  G1=primogenito, G2=segundo gemeo
#************************************************************
G1<-  c(86 , 71 , 77 , 68 , 91 , 72 , 77 , 91 , 70 , 71 , 88 , 87)
G2<-  c(88 , 77 , 76 , 64 , 96 , 72 , 65 , 90 , 65 , 80 , 81 , 72)
# Testar primeiro
shapiro.test(G1-G2)   #há normalidade
# H0 = há normalidade
# H1 = não há
# p > 0.05 então não devo rejeitar H0, pois há normalidade
qqnorm( G1-G2)
qqline(G1-G2)
# O boxplot tem uma certa simetria o que indica normalidade
boxplot(G1-G2)
# Como aparentemente há normalidade testaremos pelo teste t
t.test(G1,G2, paired=T, alternative='greater')
# O resultado do teste T indica que não há diferenças pois o p é não significativo
# como temos poucos dados e não temos informações sobre as populações
# é mais seguro usar um teste não paramétrico
# Teste não paramétrico de Wilcoxon
wilcox.test(G1,G2,paired=T, alternative='greater')
# H0:G1=G2
# usei greater pq H1: G1>G2
# O resultado também indica que não há diferença e portanto não devo rejeitar H0
# Como o valo p > 0,05, não rejeito H0, ou seja, ao nível de 5% de significância,
# não há evidências de que o primogênito seja mais agressivo que o segundo gêmeo
#*************************************************************
#exercício 2  antes=peso pré dieta, depois=peso pós dieta
#*************************************************************
antes<- c(202 , 189 , 149 , 186 , 149 , 200 , 220 , 190 , 164 ,
161 , 162 , 171 , 193 , 163 ,187 , 178 , 218 , 181 ,
140 , 168)
depois<- c(204 , 177 , 154 , 169 , 140 , 200 , 214 , 189 , 167 ,
150 , 155 , 172 , 183 , 158, 184 , 192 , 210 , 166 ,
143 , 164)
shapiro.test(antes-depois)   #há normalidade
# H0 = há normalidade
# H1 = não há
# p > 0.05 então não devo rejeitar H0, pois há normalidade
qqnorm(antes-depois)
qqline(antes-depois)
# O boxplot tem uma certa simetria o que indica normalidade
boxplot(antes-depois)
# Como aparentemente há normalidade testaremos pelo teste t
t.test(antes,depois, paired=T, alternative="two.sided")
# O resultado do teste T indica que há diferenças pois o p é significativo
# como temos poucos dados e não temos informações sobre as populações
# é mais seguro usar um teste não paramétrico
# Teste não paramétrico de Wilcoxon
wilcox.test(antes,depois,paired=T, alternative="two.sided")
# H1:G1<>G2
# usei two sided pq H1: G1<>G2
# Como o valo p < 0,05, rejeito H0, ou seja, ao nível de 5% de significância,
# há evidências de que há diferenças entre preso pré dieta e peso pró dieta
#**************Mann-Whitney**********************************
#  #exercicio 1
#************************************************************
fazenda<- c(14.8 , 7.3 , 5.6 , 6.3 , 9.0, 4.2 , 10.6 ,
12.5 , 12.9 , 16.1 , 11.4 , 2.7)
cidade<- c(12.7 , 14.2 , 12.6 , 2.1 , 17.7, 11.8 , 16.9 ,
7.9 , 16.0 , 10.6 , 5.6 , 5.6 , 7.6,11.3,8.3,
6.7,18.6,3.2,2.4,6.4,9.1,6.7,18.6,3.2, 6.2,6.1,
15.3,10.6,1.8,5.9,9.9,10.6,14.8,5.0,2.6,4.0 )
boxplot(c(fazenda,cidade)~rep(c('fazenda','cidade'),c(length(fazenda),length(cidade))))
shapiro.test(fazenda)   #há normalidade
qqnorm(fazenda)
qqline(fazenda)
shapiro.test(cidade)  #a 10% não há normalidade
qqnorm( cidade)
qqline(cidade)
# Teste não paramétrico de Wilcoxon
wilcox.test(fazenda,cidade,paired=F,alternative='greater',conf.level = 0.95)
wilcox.test(fazenda,cidade,paired=F,alternative='greater',conf.level = 0.99)
# H1:moradores da fazenda são mais equilibrados que da cidade
# conclusão Não rejeitar H0
#*************************************************************
# exercício 2
#*************************************************************
treinado<-  c(78,64,75,45,82)
controle<-  c(110,70,53,51)
shapiro.test(treinado)   # não há normalidade
qqnorm(treinado)
qqline(treinado)
shapiro.test(controle)   # não há normalidade
qqnorm( controle)
qqline(controle)
boxplot(c(treinado,controle)~rep(c('treinado','controle'),c(length(treinado),length(controle))))
# Teste não paramétrico de Wilcoxon
wilcox.test(treinado,controle,paired=F,alternative='greater',conf.level = 0.95)
# H0: treinado=controle
# H1: treinado>controle
# Como o valo p > 0,05, não rejeito H0, ou seja, ao nível de 5% de significância,
# há evidências de que não há diferenças entre ratos treinados e ratos controle
#**************Kolmogorov-Smirnov**********************************
#exercicio 1
#*************************************************************
A<-c(0.92, 1.00, 0.55, 0.61, 2.27,
0.81, 0.47, 1.69, 0.40, 0.80,
0.88, 0.29, 0.87, 1.27, 0.76,
1.04, 1.53, 0.33, 0.05, 1.81,
0.39, 0.60, 0.52, 0.32, 2.02)
B<- c(1.78,1.25,1.01,1.82,1.95,
1.81,0.68,1.48,1.59,0.89,
0.86,1.63,1.26,1.07,1.31)
shapiro.test(A)    #não há normalidade
qqnorm(A)
qqline(A)
shapiro.test(B)
qqnorm(B)
qqline(B)
boxplot(c(A,B)~ rep(c('Droga A','Droga B'), c(length(A),length(B)))  )
ks.test(A,B)
#há diferença entre as drogas
# resolvendo por Mann-Whitney
wilcox.test(A,B,paired=F,alternative='two.sided')
#*************************************************************
#exercício 2
#*************************************************************
varA<-c(4.3,3.8,5.2,2.5,3.5,4.1,5.1,4.0,2.2,3.8,4.5,1.7,
3.6,4.5,5.0)
varB<-c(4.2,4.8,4.7,6.5,6.3,5.9,7.2,5.1,6.2,6.8)
#**************Kruskal-Wallis**********************************
#exercicio 1
#*************************************************************
A<- c(116.1,114.4,113.6,101.6,112.7)
B<- c(105.3, 99.9,104.8,105.1,100.2)
C<- c(121.6,122.0,124.9,123.3)
D<- c(123.8,122.9,118.5)
shapiro.test(A)
shapiro.test(B)
shapiro.test(C)
shapiro.test(D)
var=c(A,B,C,D)
tratamento=factor(rep(1:4,c(length(A),length(B),length(C),
length(D))), labels=c('A','B','C','D'))
tratamento
boxplot(var~tratamento,xlab='Tratamento',ylab='Rendim(Kg)')
kruskal.test(list(A,B,C,D))  #ou como abaixo
kruskal.test(var,tratamento)
# Se vc tem um controle usar o teste abaixo para comparações multiplas
library(pgirmess)
kruskalmc(var,tratamento,probs=0.05,cont=NULL)
#como valor p<0,05, rejeitamos H0. Ou seja, há diferença signif
# teste de comparações multiplas pois houve diferença entre tratamentos
library(nparcomp)
dat<- data.frame(var=var,tratamento=tratamento)
attach(dat)
a<-nparcomp(var~tratamento,  data=dat,
type = "Tukey",alternative = "two.sided")
summary(a)
plot(a)
#*************************************************************
#exercício 2
#*************************************************************
A<- c(73,64,67,62,70)
B<- c(84,80,81,77)
C<- c(82,79,71,75)
tempo=c(A,B,C)
marca=factor(rep(1:3,c(length(A),length(B),length(C)
)), labels=c('A','B','C'))
boxplot(tempo~marca,xlab='Marca',ylab='tempo')
kruskal.test(list(A,B,C))
#como valor p<0,05, rejeitamos H0. Ou seja, há diferença signif
# teste de comparações multiplas
library(nparcomp)
dat<- data.frame(tempo=tempo,marca=marca)
attach(dat)
a<-nparcomp(tempo~marca,  data=dat,
type = "Tukey",alternative = "two.sided")
summary(a)
plot(a,xlab='Marca')
A<- c(116.1,114.4,113.6,101.6,112.7)
B<- c(105.3, 99.9,104.8,105.1,100.2)
C<- c(121.6,122.0,124.9,123.3)
D<- c(123.8,122.9,118.5)
shapiro.test(A)
shapiro.test(B)
shapiro.test(C)
shapiro.test(D)
var=c(A,B,C,D)
tratamento=factor(rep(1:4,c(length(A),length(B),length(C),
length(D))), labels=c('A','B','C','D'))
tratamento
boxplot(var~tratamento,xlab='Tratamento',ylab='Rendim(Kg)')
kruskal.test(list(A,B,C,D))  #ou como abaixo
kruskal.test(var,tratamento)
# Se vc tem um controle usar o teste abaixo para comparações multiplas
library(pgirmess)
kruskalmc(var,tratamento,probs=0.05,cont=NULL)
#como valor p<0,05, rejeitamos H0. Ou seja, há diferença signif
# teste de comparações multiplas pois houve diferença entre tratamentos
library(nparcomp)
dat<- data.frame(var=var,tratamento=tratamento)
attach(dat)
a<-nparcomp(var~tratamento,  data=dat,
type = "Tukey",alternative = "two.sided")
summary(a)
plot(a "xlabel "Tratamento")
plot(a, "xlabel "Tratamento")
plot(a, xlabel "Tratamento")
? plot
require(stats)
plot(cars)
## Simple quantiles/ECDF, see ecdf() {library(stats)} for a better one:
plot(x <- sort(rnorm(47)), type = "s", main = "plot(x, type = \"s\")")
points(x, cex = .5, col = "dark red")
#*************************************************************
plot(cars, main = "") # here, could use main directly
title(main = "Stopping Distance versus Speed")
plot(cars, main = "")
title(main = list("Stopping Distance versus Speed", cex=1.5,
col="red", font=3))
## Specifying "..." :
plot(1, col.axis = "sky blue", col.lab = "thistle")
title("Main Title", sub = "sub title",
cex.main = 2,   font.main= 4, col.main= "blue",
cex.sub = 0.75, font.sub = 3, col.sub = "red")
x <- seq(-4, 4, len = 101)
y <- cbind(sin(x), cos(x))
matplot(x, y, type = "l", xaxt = "n",
main = expression(paste(plain(sin) * phi, "  and  ",
plain(cos) * phi)),
ylab = expression("sin" * phi, "cos" * phi), # only 1st is taken
xlab = expression(paste("Phase Angle ", phi)),
col.main = "blue")
axis(1, at = c(-pi, -pi/2, 0, pi/2, pi),
labels = expression(-pi, -pi/2, 0, pi/2, pi))
abline(h = 0, v = pi/2 * c(-1,1), lty = 2, lwd = .1, col = "gray70")
plot(1, col.axis = "sky blue", col.lab = "thistle")
title("Main Title", sub = "sub title",
cex.main = 2,   font.main= 4, col.main= "blue",
cex.sub = 0.75, font.sub = 3, col.sub = "red")
plot(a)
title(xlab = "NULL, ylab = "Marca")
title(ylab = "Marca")
plot(a)
title(ylab = "Marca")
G1<-  c(86 , 71 , 77 , 68 , 91 , 72 , 77 , 91 , 70 , 71 , 88 , 87)
G2<-  c(88 , 77 , 76 , 64 , 96 , 72 , 65 , 90 , 65 , 80 , 81 , 72)
# Testar primeiro se há normalidade
shapiro.test(G1-G2)   #há normalidade
# H0 = há normalidade
# H1 = não há
# p > 0.05 então não devo rejeitar H0, pois há normalidade
qqnorm( G1-G2)
# Gráfico para mostrar normalidade
qqnorm( G1-G2)
qqline(G1-G2)
source('C:/Users/ecacarva/Google Drive/__Modelo_Análise/script.r')
# O boxplot tem uma certa simetria o que indica normalidade
boxplot(G1-G2)
antes<- c(202 , 189 , 149 , 186 , 149 , 200 , 220 , 190 , 164 ,
161 , 162 , 171 , 193 , 163 ,187 , 178 , 218 , 181 ,
140 , 168)
depois<- c(204 , 177 , 154 , 169 , 140 , 200 , 214 , 189 , 167 ,
150 , 155 , 172 , 183 , 158, 184 , 192 , 210 , 166 ,
143 , 164)
# Testar primeiro se há normalidade
shapiro.test(antes-depois)
qqnorm(antes-depois)
qqline(antes-depois)
boxplot(antes-depois)
t.test(antes,depois, paired=T, alternative="two.sided")
wilcox.test(antes,depois,paired=T, alternative="two.sided")
t.test(antes,depois, paired=T, alternative="two.sided")
antes<- c(202 , 189 , 149 , 186 , 149 , 200 , 220 , 190 , 164 ,
161 , 162 , 171 , 193 , 163 ,187 , 178 , 218 , 181 ,
140 , 168)
depois<- c(204 , 177 , 154 , 169 , 140 , 200 , 214 , 189 , 167 ,
150 , 155 , 172 , 183 , 158, 184 , 192 , 210 , 166 ,
143 , 164)
# Testar primeiro se há normalidade
shapiro.test(antes-depois)
# H0 = há normalidade
# H1 = não há
# p = 0.9396 > 0.05 então não devo rejeitar H0, pois há normalidade
# Gráficos para mostrar normalidade
qqnorm(antes-depois)
qqline(antes-depois)
boxplot(antes-depois)
# O boxplot tem uma certa simetria o que indica normalidade
# Como aparentemente há normalidade testaremos pelo teste t
t.test(antes,depois, paired=T, alternative="two.sided")
# O resultado do teste T indica que há diferenças pois o p é significativo
# como temos poucos dados e não temos informações sobre as populações
# é mais seguro usar um teste não paramétrico
# Teste não paramétrico de Wilcoxon
wilcox.test(antes,depois,paired=T, alternative="two.sided")
wilcox.test(antes,depois,paired=T, alternative="two.sided")
wilcox.test(antes,depois,paired=T, alternative="two.sided")
# H1:G1<>G2
wilcox.test(antes,depois,paired=T, alternative="two.sided")
fazenda<- c(14.8 , 7.3 , 5.6 , 6.3 , 9.0, 4.2 , 10.6 ,
12.5 , 12.9 , 16.1 , 11.4 , 2.7)
cidade<- c(12.7 , 14.2 , 12.6 , 2.1 , 17.7, 11.8 , 16.9 ,
7.9 , 16.0 , 10.6 , 5.6 , 5.6 , 7.6,11.3,8.3,
6.7,18.6,3.2,2.4,6.4,9.1,6.7,18.6,3.2, 6.2,6.1,
15.3,10.6,1.8,5.9,9.9,10.6,14.8,5.0,2.6,4.0 )
boxplot(c(fazenda,cidade)~rep(c('fazenda','cidade'),c(length(fazenda),length(cidade))))
shapiro.test(fazenda)   #há normalidade
boxplot(c(fazenda,cidade)~rep(c('fazenda','cidade'),c(length(fazenda),length(cidade))))
qqnorm(fazenda)
qqline(fazenda)
shapiro.test(cidade)  #a 10% não há normalidade
shapiro.test(fazenda)   #há normalidade
qqnorm(fazenda)
qqline(fazenda)
shapiro.test(cidade)  #a 10% não há normalidade
qqnorm( cidade)
qqline(cidade)
shapiro.test(fazenda)   #há normalidade
qqnorm(fazenda)
qqline(fazenda)
shapiro.test(cidade)  #a 10% não há normalidade
qqnorm( cidade)
qqline(cidade)
fazenda<- c(14.8 , 7.3 , 5.6 , 6.3 , 9.0, 4.2 , 10.6 ,
12.5 , 12.9 , 16.1 , 11.4 , 2.7)
cidade<- c(12.7 , 14.2 , 12.6 , 2.1 , 17.7, 11.8 , 16.9 ,
7.9 , 16.0 , 10.6 , 5.6 , 5.6 , 7.6,11.3,8.3,
6.7,18.6,3.2,2.4,6.4,9.1,6.7,18.6,3.2, 6.2,6.1,
15.3,10.6,1.8,5.9,9.9,10.6,14.8,5.0,2.6,4.0 )
boxplot(c(fazenda,cidade)~rep(c('fazenda','cidade'),c(length(fazenda),length(cidade))))
shapiro.test(fazenda)   #há normalidade
qqnorm(fazenda)
qqline(fazenda)
shapiro.test(cidade)  #a 10% não há normalidade
qqnorm( cidade)
qqline(cidade)
# Teste não paramétrico de Wilcoxon
wilcox.test(fazenda,cidade,paired=F,alternative='greater',conf.level = 0.95)
wilcox.test(fazenda,cidade,paired=F,alternative='greater',conf.level = 0.99)
fazenda<- c(14.8,  7.3,  5.6,  6.3, 9.0, 4.2, 10.6,
12.5, 12.9, 16.1, 11.4, 2.7)
cidade<- c(12.7, 14.2, 12.6, 2.1, 17.7, 11.8, 16.9,
7.9, 16.0, 10.6, 5.6, 5.6, 7.6, 11.3, 8.3,
6.7, 18.6,  3.2, 2.4, 6.4, 9.1,  6.7,18.6, 3.2, 6.2,6.1,
15.3, 10.6,  1.8, 5.9, 9.9,10.6, 14.8, 5.0, 2.6, 4.0)
boxplot(c(fazenda,cidade)~rep(c('fazenda','cidade'),c(length(fazenda),length(cidade))))
shapiro.test(fazenda)   #há normalidade
qqnorm(fazenda)
qqline(fazenda)
shapiro.test(cidade)  #a 10% não há normalidade
qqnorm( cidade)
qqline(cidade)
####################################################
# Verificar a hipotese ao nivel de 1% de signicancia.
####################################################
# Teste não paramétrico de Wilcoxon
wilcox.test(fazenda,cidade,paired=F,alternative='greater',conf.level = 0.99)
wilcox.test(fazenda,cidade,paired=F,alternative='greater',conf.level = 0.99)
treinado<-  c( 78,64,75,45,82)
controle<-  c(110,70,53,51)
shapiro.test(treinado)   # não há normalidade
qqnorm(treinado)
qqline(treinado)
shapiro.test(controle)   # não há normalidade
qqnorm( controle)
qqline(controle)
boxplot(c(treinado,controle)~rep(c('treinado','controle'),c(length(treinado),length(controle))))
# Teste não paramétrico de Wilcoxon
wilcox.test(treinado,controle,paired=F,alternative='greater',conf.level = 0.95)
A<-c(0.92, 1.00, 0.55, 0.61, 2.27,
0.81, 0.47, 1.69, 0.40, 0.80,
0.88, 0.29, 0.87, 1.27, 0.76,
1.04, 1.53, 0.33, 0.05, 1.81,
0.39, 0.60, 0.52, 0.32, 2.02)
B<- c(1.78,1.25,1.01,1.82,1.95,
1.81,0.68,1.48,1.59,0.89,
0.86,1.63,1.26,1.07,1.31)
shapiro.test(A)    #não há normalidade
qqnorm(A)
qqline(A)
shapiro.test(B)
qqnorm(B)
qqline(B)
boxplot(c(A,B)~ rep(c('Droga A','Droga B'), c(length(A),length(B)))  )
ks.test(A,B)
wilcox.test(A,B,paired=F,alternative='two.sided')
ks.test(A,B) #há diferença entre as drogas
varA<-c(4.3,3.8,5.2,2.5,3.5,4.1,5.1,4.0,2.2,3.8,4.5,1.7,
3.6,4.5,5.0)
varB<-c(4.2,4.8,4.7,6.5,6.3,5.9,7.2,5.1,6.2,6.8)
rm(list = ls())
ls()
setwd("C:/Users/ecacarva/GDrive/Google Drive/githubEA/Cirurgia Tucuman/data")
surg1 <- read.csv("surgery_1_elias.csv")
surg2 <- read.csv("surgery_2_elias.csv")
death <- read.csv("mortality.csv")
names(surg1)
names(surg2)
names(death)
#two lines below simply join any two data sets at a time. there is a simple way to use ON to do all of this in a single line if you guys would like to give it a shot
system.time(bigdf <- sqldf("select * from f", dbname = tempfile(), file.format = list(header = T, row.names = F)))
library(sqldf)
gc(reset = TRUE) # liberar a memória para o SO
system.time(bigdf <- sqldf("select * from f", dbname = tempfile(), file.format = list(header = T, row.names = F)))
data <- sqldf("SELECT * FROM surg1  JOIN surg2 USING(PacienteId)", dbname = tempfile(), file.format = list(header = T, row.names = F))
names(data)
data2 <- sqldf("SELECT * FROM data JOIN death USING(?????)")
names(surg1)
names(surg2)
rm(list = ls())
ls()
library(sqldf)
gc(reset = TRUE) # liberar a memória para o SO
# New Lines
surg1 <- read.csv("surgery_1.csv")
surg2 <- read.csv("surgery_2.csv")
death <- read.csv("mortality.csv")
names(surg1)
names(surg2)
names(death)
names(surg1)
names(surg2)
names(death)
#two lines below simply join any two data sets at a time. there is a simple way to use ON to do all of this in a single line if you guys would like to give it a shot
data <- sqldf("SELECT * FROM surg1  JOIN surg2 USING(PacienteId)", dbname = tempfile(), file.format = list(header = T, row.names = F))
names(data)
data <- sqldf("SELECT * FROM surg1  JOIN surg2 USING(PacienteId)", dbname = tempfile(), file.format = list(header = T, row.names = F))
